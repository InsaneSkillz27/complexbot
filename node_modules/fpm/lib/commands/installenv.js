'use strict';

var path = require('path');
var fs = require('fs');
var os = require('os');

var file = require('file-utils');
var Q = require('q');

var cmd = require('../util/cmd');
var colors = require('../util/colors');
var config = require('./templates/_envpackage.json');

var getRoot = () => {
  var platform = os.platform();
  var root;
  if (platform === 'win32') {
      root = path.parse(process.cwd()).root;
  } else {
      root = os.homedir();
  }
  return root;
};

var isWin = () => {
  return os.platform() === 'win32' ? true : false;
};

// rmdir /s/q clone
// rm -rf rimraf
var delDir = dir => {
  return isWin() ? cmd('rmdir', ['/s/q', dir]) : cmd('rm', ['-rf', dir]);
};

var deleteModule = () => {
  var root = getRoot();
  var devDepends = config.devDependencies;
  var dir;
  var delTasks = [];
  for (var key in devDepends) {
    dir = path.join(root, 'node_modules', key);
    if (fs.existsSync(dir)) {
      delTasks.push(delDir(dir));
    }
  }
  return Q.all(delTasks).catch(function () {
    throw new Error({info: '删除已有模块错误'});
  });
};

var copyPackageSync = () => {
  var  from = path.resolve(__dirname, 'templates', '_envpackage.json');
  var to = path.resolve(getRoot(), 'package.json');
  var data = fs.readFileSync(from, 'utf8');
  if (fs.existsSync(to)) {
    fs.writeFileSync(to, data, 'utf8');
  } else {
    fs.appendFileSync(to, data, 'utf8');
  }
};

var installModule = () => {
  var path = process.cwd();
  process.chdir(getRoot());
  console.log(colors.yellow('开始安装开发包，请等待...'));
  return cmd('npm', ['install'])
    .progress(function (data) {
      process.stdout.write(data);
    })
    .then(function() {
      console.log(colors.green('开发包安装完成'));
      process.chdir(path);
    })
    .catch(function () {
      process.chdir(path);
      throw new Error({info: '安装错误，请重试'});
    });
};

var installenv = () => {
  copyPackageSync();
  deleteModule()
    .then(installModule)
    .catch(function (e) {
      var msg = e.message;
      if (msg.info) {
        console.log(colors.red(msg.info));
      } else {
        console.log(colors.red(msg));
      }
    });
};

installenv.line = () => {
  return installenv();
};

module.exports = installenv;



