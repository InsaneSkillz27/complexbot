/**
 * git 提交脚本
 * 如果是有版本则需要同步配置文件 bower.js package.json文件
 * iffront commit --syn --tag 
      syn : 同步到远程服务器
      tag : 版本号
   iffront commit --main "file1,file2" 提交主文件
   iffront commit --cdn  "address1,address2" 提交文件的cdn地址   
 */  

"use strict";

var nopt = require('nopt');
var cmd = require('../util/cmd');
var Q = require('q');
var fileUtils = require('file-utils');
var path = require('path');
var crypto = require('crypto');
var chver = require('./chver');
var util  = require('../util/util');
var chalk = require('chalk');

function commit(options){
    
      var mainFile = options.main;
      var cdnFile = options.cdn;
      var message = options.m || 'commit';
      if(typeof mainFile !== 'undefined' && mainFile !== ''){
            //提交主文件  
            commitMainFile(mainFile);
      }else if(typeof cdnFile !== 'undefined' && cdnFile !== ''){
            //提交cdn文件 
            commitCdnFile(cdnFile.split(','));
      }else{
        var dirs = ['app' , 'dist'];
        var backfiles = [];
        dirs.forEach(function(dir){
            var match = fileUtils.expand('./package.json','./bower.json','./'+dir+'/scripts/**/*.js','./'+dir+'/*.html' , './'+dir+'/styles/**/*.css' , './'+dir+'/tpls/**/*.html');
            backfiles.push.apply(backfiles , match);
        });
        var backfilecontents = util.backFile(backfiles); //备份文件
        //处理版本提交
         var syn = options.syn || false;
         var version = options.tag;
         try{
             //修改dist目录下@VERSION @project-version@标记，并重写了文件名
             //placeBuildVersion(version);
             //1、如果有版本号则需要先将bower.js、pachage.json文件中的version改为当前版本
             //2、本地文件提交版本信息,并确保dist目录下所有文件都提交
             //3、如果存在syn则将本顶内容、版本信息一并提交到远端服务器。
             if(typeof version !== 'undefined' && version !== ''){
                //修改dist目录下@VERSION @project-version@标记，并重写了文件名
                placeBuildVersion(version);
                var packageJson = fileUtils.readJSON('package.json');
                if(typeof packageJson.type == 'undefined' && packageJson.name != 'glue'){
                    var msg = 'package.json no has type , please manual set \'type\' value';
                    console.log(chalk.red(msg));
                    throw new Error(msg);
                }
                if(packageJson.type == 'module' && packageJson.name != 'glue'){ //如果是组件并且不是glue则需要处理js、css的版本
                    var oldversion = packageJson.version; //组件的原始版本
                    var name = packageJson.name;  //组件名称
                    chver({'oldVersion':oldversion, 'newVersion':version ,'name':name , 'first' : false , 'dirs' : ['app' , 'dist']});  //更新版本
                }
                updateVersion(version)
             }
             processDistFileName(); //文件的内容可能变化了，所以要重新修改文件的名称（md5）
             addUnTrackFileToLocal() //提交目录下所有unstage文件
             .then(commitLocalFile.bind(commitLocalFile , [message]))
             .then(commitLocalVersion.bind(commitLocalVersion,[version])) //提交本地文件版本
             .then(function(){
               if(syn){ //是否同步到远程
                  return commitRemote();  //push本地信息到远程服务
               }else{
                  return [];
               }   
             })
             .then(null , function(error){
                 console.log(error);
                 throw new  Error(error);
             });
             
         }catch(error){
            console.log(error);
            //恢复备份文件
            console.log(chalk.red('has error , recoveFile start'));
            util.recoveFile(backfilecontents);
         }
      }
}


/**
 * 重新计算文件名，在commit的过程中对dist一些文件进行了修改
 * 需要重新计算文件的名称,名称修改完毕后还需要将修改过的文件重新设置到bower的main中
 */
function processDistFileName(){
    var matchFiles = fileUtils.expand('./dist/**/*.js','./dist/**/*.css');
    var changedFiles = [];
    var fileNameCache = {};
    matchFiles.forEach(function(fileName){
         
         var extname = path.extname(fileName);
         if(fileName.indexOf('.min'+extname)>0){
            extname = '.min'+extname;
         }
         var baseName = path.basename(fileName);
         var noextFileName = baseName.substring(0 , baseName.lastIndexOf("_"));
         var md5value = fileNameCache[noextFileName];
         var content = fileUtils.read(fileName);
         if(md5value){
             var outfileName = fileName.substring(0 , fileName.indexOf(baseName))+noextFileName+'_'+md5value+extname;
             fileUtils.delete(fileName); //删除原始文件
             fileUtils.write(outfileName , content); //写入新文件
             var _tmpFile = {};
             _tmpFile.oldFileName = fileName;
             _tmpFile.newFileName = outfileName;
             changedFiles.push(_tmpFile);
             return;
         }

         //得到内容的md5值
         var suffix = md5suffix(content);
         //得到文件名中的md5值
         var pos = fileName.lastIndexOf('_');
         var md5 = fileName.substring(pos , fileName.indexOf(extname));
         if(md5 == suffix){
            return;
         }

         var newpathName = fileName.substring(0 , fileName.indexOf(extname));
         newpathName = newpathName.substring(0 , newpathName.lastIndexOf('_'));
         newpathName += '_'+suffix+extname;
         fileUtils.delete(fileName);
         fileUtils.write(newpathName , content);
         var _tmpFile = {};
         _tmpFile.oldFileName = fileName;
         _tmpFile.newFileName = newpathName;
         fileNameCache[noextFileName] = suffix;
         changedFiles.push(_tmpFile);
    });

    //更新html中的文件依赖
    matchFiles = fileUtils.expand('./dist/*.html');
    if(typeof matchFiles != 'undefined' && matchFiles != null && matchFiles.length>0){
        matchFiles.forEach(function(fileName){
            var content = fileUtils.read(fileName);
            changedFiles.forEach(function(changeFile){
                var oldName = path.basename(changeFile.oldFileName);
                var newName = path.basename(changeFile.newFileName);
                var regx = new RegExp(oldName , 'ig');
                content = content.replace(regx , newName);
            });
            fileUtils.write(fileName, content);
        });
    }
    //更新bower的main目录
    var bowerJson = fileUtils.read('./bower.json');
    var hasChange = false;
    changedFiles.forEach(function(changeFile){
        hasChange = true;
        var oldName = path.basename(changeFile.oldFileName);
        var newName = path.basename(changeFile.newFileName);
        var regx = new RegExp(oldName , 'ig');
        bowerJson = bowerJson.replace(regx , newName);
    });
    if(hasChange){
        fileUtils.write('./bower.json' , bowerJson);
    }
}

function md5suffix(content) {
    var hash = crypto.createHash('md5');
    hash.update(content);
    var _hash = hash.digest('hex');
    var suffix = _hash.slice(0, 8);
    return suffix;
}


/**
 * 修改brower.json、package.json中的main属性
 */
function commitMainFile(mainfile){
     updateJsonFileProperty('package.json' , 'main' , mainfile);
     updateJsonFileProperty('bower.json' , 'main' , mainfile);
}

/**
 * 将build后的lib文件中的@version标签替换为当前版本
 */
function placeBuildVersion(version){

    var packageJson = fileUtils.readJSON('bower.json');
    var mains = packageJson.main || [];
    //更新组件版本
    var hasChange = false;
    var changeList = {};
    var exitsuffix = {};
    for(var i=0 ; i<mains.length; i++){
        var filepaths = mains[i];
        if(typeof filepaths == 'object'){
            for(var p in filepaths){
                filepaths = filepaths[p];
                break;
            }
        }else{
            filepaths = [filepaths];
        }
        for(var j=0; j<filepaths.length; j++){
            var filepath = filepaths[j]
            if(path.extname(filepath) != '.js'){
                continue;
            }
            var content = fileUtils.read(filepath);
            if(content.indexOf('@VERSION') == -1){
                continue;
            }
            hasChange = true;
            var content = content.replace(/@VERSION/g , version);
            fileUtils.write(filepath , content);
        }
    }

    //更新项目文件，用户可能没有放置在标记内，所以需要全部查询替换
    fileUtils.recurse('dist' , function(filepath , rootdir , dundir , filename){
         if(path.extname(filepath)  != '.js'){
            return;
         }
         var content = fileUtils.read(filepath);
         if(content.indexOf('@project-version@') == -1){
            return;
         }
         hasChange = true;
         var content = content.replace(/@project-version@/g , version);
         fileUtils.write(filepath , content);
    });
    //更新bower.json版本
    updateJsonFileProperty('./bower.json' , 'version' , version);
}

function addUnTrackFileToLocal(){
    return cmd('git', ['add', '-A' , '.']);  //提交目录下所有unstage文件
}
/**
 * 添加dist目录下为track文件到本地仓库
 */
function addDistUnTrackFileToLocal(){
     fileUtils.mkdir('dist');
     return cmd('git', ['add', '-A' , 'dist']);  //提交目录下所有unstage文件
}

function addDocUnTrackFileToLocal(){
    fileUtils.mkdir('docs');
    return cmd('git', ['add', '-A' , 'docs']);  //提交目录下所有unstage文件
}

/*
 * 修改cdn文件
 */
function commitCdnFile(cdnFile){
    updateJsonFileProperty('package.json' , 'cdnmain' , cdnFile);
    updateJsonFileProperty('bower.json' , 'cdnmain' , cdnFile);
}

/*
 * 提交文件到本地head
 */
function commitLocalFile(message){
    return cmd('git', ['commit', '-a' , '--m' , '"'+message+'"']).then(
       function(data){
         return []; //提交成功
       },
       function(data){
         //提交失败。
         var stdout = data.stdout;
         if(stdout.match(/\s*nothing\s*to\s*commit\s*/ig)){
            //git commit当没有数据可以提交是返回的code==1
            //这里需要处理没有数据提交的情况，如果是没有数据提交则返回正常。
            return [];
         }
         throw new Error(data);
       },
       function(data){
         //回显通知       
         return [];
       }
    )
}

/**
 * 更新配置文件版本
 */
function updateVersion(version){
    return updateJsonFileProperty('package.json' , 'version' , version);
}


function updateJsonFileProperty(fileName , propertyName , propertyValue){

    var packageJson = fileUtils.readJSON(path.resolve(process.cwd(), fileName));
    packageJson[propertyName] = propertyValue;
    var jsonStr = JSON.stringify(packageJson, null, '  ');
    fileUtils.write(path.resolve(process.cwd(), fileName) , jsonStr);
}

/**
 * 本地提交版本信息
 */
function commitLocalVersion(version){
    if(typeof version != "undefined" && version != ""){
        return cmd('git', ['tag', version]);
    }else{
        return [];
    }
}

/**
 * 将修改的文件、版本信息提供到远端服务器
 */
function commitRemote(){
    return cmd('git' , ['status']).then(function(result){
        var regx = /\s*On\s*branch\s*(\S*)\s*.*[\r|n]*/i;
        var matchs = regx.exec(result);
        if(typeof matchs != 'undefined' && matchs.length && matchs.length>0){
            console.log('push  to branch '+matchs[1]);
            return cmd('git', ['push', '--tag' , '--progress' , 'origin' , matchs[1]]);
        }
        console.log('waring : no find branch , use default set . please confirm.');
        return cmd('git', ['push', '--tag' , '--progress' , 'origin']);
    });
    
}

// ------------------- 接口方法

commit.line = function (argv) {
    var options = commit.options(argv);
    return commit(options);
};

commit.options = function (argv) {
    var knownOpts = {
                   "syn" : Boolean,  //是否同步服务器
                   "tag" : String,   //版本号
                   "main" : [String , Array], //系统压缩后的主文件
                   "cdn"  : [String , Array], //系统对应的cdn文件
                };
    var shortHands = {};
    return nopt(knownOpts, shortHands, argv);
};

commit.completion = function () {
    //TODO:
};

module.exports = commit;
