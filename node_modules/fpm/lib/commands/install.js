/**
 * 安装组件 
 * #iffront install [<moduleName[#version]> [--rj <moduleName[#version]] [--sj <moduleNa,e[#version]>]* ]
 * iffront insrall --comp moduleName[#version] [--comp modelName[#version]] --file installFile
 */

"use strict";

var cli = require('../util/cli');  //命令行
var defaultConfig = require('../config');
var fileUtils = require('file-utils');
var nopt = require('nopt');
var wm = require('wm');  //组件(widget)管理
var computil = wm.ComponentUtils; //组件工具
var bower = require('bower');
var Q = require('q');
var createError = require('../util/createError');
var cmd = require('../util/cmd');
var util = require('../util/util')

/**
 * 安装组件
 */
function install(options , argv){

   var moduleNames = options.module;
   var installDir = process.cwd(); 
   if(moduleNames.length == 0){
       moduleNames = getModuleNames();
   }
   console.log('start install '+moduleNames);
   processModuleName(moduleNames).then(function(newNoduleNames){

     computil.install(newNoduleNames , { 'cwd':installDir , registry:defaultConfig.registry, directory : defaultConfig.directory}).on('end', function (installed) {
          var bowerJson = fileUtils.readJSON('bower.json');
          //得到全部依赖组件,安装组件到指定的html内容中
          var moduleNames = {};
          var hasGlue = false;
          for(var p in bowerJson.dependencies){
                if(p.indexOf("glue")==0){
                    hasGlue = false;
                }
                moduleNames[p] = bowerJson.dependencies[p];
          }

          if(bowerJson.glue != null && typeof bowerJson.glue !='undefined'){
               for(var p in bowerJson.glue ){
                  moduleNames[p] = bowerJson.glue[p];
                  bowerJson.dependencies[p] = bowerJson.glue[p];
               }
          }

          var depInfo = computil.getDepInfo(moduleNames , {'installDir':installDir});
          computil.injectDeps(depInfo , {'src':options.file , 'ignore-path':installDir+'/app/'});

          bowerJson = filterGlue(bowerJson);
          fileUtils.write('bower.json' , JSON.stringify(bowerJson, null, '  '));
          console.log('install components script completed.');
     });
   }).fail(function(error){
      console.log(error);
   });
}


function filterGlue(bowerjson){
    var filterModuleName = [];
    var deps = bowerjson.dependencies;
    var glue = null;
    for(var p in deps){
          //过滤glue,是glue不在版本管理中，glue向下完全兼容
          if(p.indexOf('glue') != -1){
              if(glue == null) glue = {};
              glue[p] = deps[p];
              delete deps[p];
          }
    }

    if(glue !=null){
       bowerjson.glue = glue;
    }else{
       delete bowerjson.glue;
    }
    bowerjson.dependencies = deps;
    return bowerjson;
}

function getModuleNames(){
    var ret = [];
    var bowerJson = fileUtils.readJSON('./bower.json');
    var dependencies = bowerJson.dependencies;
    var glueversion = bowerJson.glue;
    if(typeof glueversion != 'undefined' && glueversion != ''){
        for(var k in glueversion){
           ret.push(glueversion[k]);
        }
    }
    for(var k in dependencies){
       var version = dependencies[k];
       if(version.indexOf('#')==-1){
          ret.push(k+'#'+version);
       }else{
          ret.push(version);
       }
    }

    return ret;
}

/**
 * 处理组件名称，使格式符合bower的处理格式 间
 */
function processModuleName(moduleNames){
   var deferred = Q.defer();
   var count = 1;
   var ret = [];
   moduleNames.forEach(function(moduleName){
        //如果只有名称，则需要得到最大的版本号
        var logger = bower.commands.info(moduleName , null , {'registry': defaultConfig.registry , "strictSsl":false})
        logger.on('end' , function(result){
            if(result.latest){ //存在最后版本的信息，则选择最后的版本
              var latest = result.latest;
              ret.push(result.name+'__'+latest.version+'='+result.name+'#'+latest.version);
            }else{
              ret.push(moduleName.replace('#',"__")+'='+moduleName);
            }
            if(count == moduleNames.length){
              deferred.resolve(ret);
              return;
            }
            count++;
        });
        logger.on('error' , function(error){
            count++;
            deferred.reject(error);
        });
   });
   return deferred.promise;
}

// ------------------- 接口方法
install.line = function (argv) {

    var options = install.options(argv);
    return install(options, argv);
};

install.options = function (argv) {

  var knownOpts = {
                   "file" : [String , Array],  //需要
                   "module" : [String, Array]   //组件名称
                };
  var shortHands = {};
  var options =  nopt(knownOpts, shortHands, argv);
  if(typeof options.module == 'undefined' || options.module.length ==0){
      options.module = [];
  }
  if(typeof options.file == 'undefined' || options.file.length == 0){
      options.file = ['app/index.html']
  }
  return options;

};

install.completion = function () {};

module.exports = install;