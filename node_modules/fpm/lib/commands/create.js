"use strict";

var fs = require('fs');
var path = require('path');

var Q = require('q');

var git = require('../util/gitlab');
var prompt = require('../util/prompt');
var util = require('../util/util');
var colors = require('../util/colors');
var cmd = require('../util/cmd');

var project = require('./project');


/**
 * 获取当前目录
 * @return {String} 当前目录的字符串
 */
var getCurrentDir = function () {
  var dir = process.cwd();
  return dir.split(path.sep).pop();
};

/**
 * 从git配置信息中获取用户信息
 * @param  {Object} gitLabInfo 初始配置信息
 * @return {Promise}           返回一个用户信息对象的Promise对象
 */
var getUserInfo = function (gitLabInfo) {
  var deferred = Q.defer();
  var login = cmd('git', ['config', 'user.name']);
  var password = cmd('git', ['config', 'user.password']);
  Q.all([login, password])
      .spread((login, password) => {
        login = login[0] ? login[0].replace(/(\r|\n)/g, '') : login[0];
        password = password[0] ? password[0].replace(/(\r|\n)/g, '') : password[0];
        if (!login || !password) {
          deferred.reject({message: '没有找到用户信息，请先使用 fpm initconfig 来设置用户信息'});
        } else {
          deferred.resolve({
            login: login,
            password: password
          });
        }
      })
      .catch(() => {
        deferred.reject({message: '没有找到用户信息，请先使用 fpm initconfig 来设置用户信息'});
      });

  return deferred.promise;
};

/**
 * 通过用户输入获取项目名称
 * @return {[type]} [description]
 */
var getProjectName = function () {
  var options = [{
    message: '请输入项目名，默认为当前目录名',
    name: 'projectName',
    default: getCurrentDir()
  }];

  return prompt(options)
            .then(function (result) {
              return result.projectName;
            });
};

/**
 * 获取用户要将项目放入的组id
 * @param  {String} token 用户信息
 * @return {String}       组id
 * 用户可能有三种情况：
 * 1.不在任何组，这个时候返回一个空字符串
 * 2.只在一个组中，返回该组的id
 * 3.在多个组中，将所有组列出来，让用户进行选择，返回用户选择的id。
 */
var getGroupId = function (token) {
  return git.getOwnGroup(token)
            .then(msg => {
              switch (msg.length) {
                case 0:
                  return '';
                case 1:
                  return msg[0].id;
                default:
                  var options = [];
                  for (var item of msg) {
                    options.push({value: item.id, view: item.name});
                  }
                  var option = [{
                    message: '请选择项目所在的组',
                    name: 'groupId',
                    require: true,
                    options: options
                  }];
                  return prompt(option)
                            .then(result => result.groupId);
              }
            });
};

var getGroupName = (groupId, token) => {
  return git.getGroupById(groupId, token)
            .then(info => info.path);
};

/**
 * 创建一个git项目
 * fpm create
 * @moduleName 组件名称
 */

var create = function () {
  // 设置项目名称
  var projectName = getProjectName();

  // 获取注册的用户信息
  var userInfo = projectName
                    .then(getUserInfo);

  // 获取用户token
  var token = userInfo
                    .then(git.getToken);

  // 获取设置的组id
  var groupId = token
                    .then(getGroupId);
  var groupName = Q.all([groupId, token])
                    .spread(getGroupName);
  // 创建并获取项目id
  var projectId = Q.all([projectName, token, groupId])
                    .spread(git.createProject)
                    .then(function (result) {
                      console.log(colors.yellow('项目创建成功'));
                      return result.id;
                    });

  // 在创建项目的时候，就已经移入组了。
  // 将项目移动到一个组中 
  // var transfer = Q.all([groupId, projectId])
  //                   .spread((groupId, projectId) => {
  //                     if (groupId) {
  //                       return git.transferProject(groupId, projectId);
  //                     } else {
  //                       return {message: '用户不在任何组内，该项目不会移动'};
  //                     }
  //                   });

  // transfer.then(msg => {
  //   if (msg.message) {
  //     console.log(colors.red(msg.message));
  //     return;
  //   }
  //   console.log(colors.yellow('项目移动到相应组'));
  // });

  // 获取项目的git地址
  var path = Q.all([projectId, token])
                    .spread(git.getProject)
                    .then(function (project) {
                      return project.http_url_to_repo;
                    });

  // clone项目，并进行项目初始化等于 git clone ==> fpm project
  Q.all([path, process.cwd()])
      .spread(git.clone)
      .then(function () {
        console.log(colors.yellow('项目clone成功'));
        console.log(colors.yellow('开始初始化项目，时间有可能比较长，请耐心等待'));
        return Q.all([projectName, groupName])
                .spread(function (name, groupName) {
                  return project({appname: name, groupName: groupName});
                });
      })
      .then(function () {
        console.log(colors.green('项目创建完成，您可以开始使用了。'));
        process.exit();
      })
      .catch(function (e) {
        console.log(colors.red(e.message || e));
        if (e.e) {
          console.log(colors.red(e.e));
        }
        process.exit();
      });
};

create.line = function (argv) {
    return create();
};

module.exports = create;

// getUserInfo().then(result => console.log(result), result => console.log(result));
// cmd('git', ['config', 'user.name']).then(result => console.log(result), result => console.log(result));

// getGroupId('phVW188tfdNmo_6mVAUv')
//   .then(msg => console.log('msg==>', msg));