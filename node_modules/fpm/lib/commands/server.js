// 启动服务的脚本
'use strict';

var Application = require('wm').Application; //组件服务
var ComponentService = require('wm').ComponentService; //组件服务
var FilterDeviceTagService = require('wm').FilterDeviceTagService; //组件服务

var connect = require('connect');
var nopt = require('nopt');
var urlparse = require('url');
var os = require('os');  
var fileUtils = require('file-utils');
var chalk = require('chalk');

function server(options) {

        /*
        var IPv4,hostName;
        var hostName=os.hostname();

        var address = os.networkInterfaces()['本地连接'] || os.networkInterfaces()['eth0'];
        for(var i=0;i<address.length;i++){
            if(address[i].family=='IPv4'){
                IPv4=address[i].address;
            }
        }
        */
        options.ipv4 = options.ip;
        options.sourcectx = '/source';
        var app = connect();
        var combinService = new ComponentService(options , app);
        app.use('/combo' , combinService);
        app.use(options.sourcectx , connect.static(process.cwd(), {maxAge: 86400000}));
        app.listen(options.port);
        console.log(chalk.green('start combo service , ip '+options.ipv4+' port '+options.port));
}

// -------------------
server.line = function (argv) {
    var options = server.options(argv);
    if(typeof options.mode == 'undefined'){
    	options.mode = 'dev';
    }
    if(typeof options.port == 'undefined'){
    	options.port = 9001;
    }
    if(typeof options.ip == 'undefined'){
        var dirname = __dirname;
        var ipfile = dirname+'/ip';
        if(fileUtils.exists(ipfile.replace(/\\/g , '/'))){
            var content = fileUtils.read(ipfile);
            options.ip = content;
        }else{
            console.log(chalk.red('please set machine ip ! , please use fpm server --ip param.'));
            return;
        }
    }else{
        var dirname = __dirname;
        var ipfile = dirname+'/ip';
        fileUtils.write(ipfile , options.ip);
    }
    return server(options);
};

server.options = function (argv) {
    //return cli.readOptions(argv);
    var knownOpts = {
                       "mode" : String,  //local remote本地模式还是远程模式，本地模式不需要指定installDir,会使用当前路径
                       "installDir" : String,
                       "port" : Number, 
                       "ip" : String   //指定本机的IP地址
                    };
    var shortHands = {};
    return nopt(knownOpts, shortHands, argv);
};

server.completion = function () {
    // TODO:
};

module.exports = server;