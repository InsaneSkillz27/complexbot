"use strict";

var bower = require('bower');     //bower组件安装
var defaultConfig = require('../config');
var nopt = require('nopt');
var fileUtils = require('file-utils');
var wm = require('wm');  //组件(widget)管理
var computil = wm.ComponentUtils; //组件工具
var util = require('../util/util')

/**
 * 更新组件
 * iffront update moduleName
 * @name 组件名称
 */
function update(options , argv) {
    
    var moduleNames = options.module;
    var installDir = process.cwd();
    if(moduleNames.length==0){
        var bowerJson = fileUtils.readJSON('bower.json');
        for(var p in bowerJson.dependencies){
            moduleNames.push(p);
        }
    }
    var newModuleNames = processModuleName(moduleNames);
    
    bower.commands.update(newModuleNames , {save: true} , {'cwd' : installDir , 'registry': defaultConfig.registry , "strictSsl":false}).on("end" , function(result){
            updateFiledep(options);
    }).on('error' , function(error){
            console.log(error); 
    });
}


function processModuleName(moduleNames){
    var ret = [];
    moduleNames.forEach(function(moduleName){
        ret.push(moduleName.replace('#' ,'__'));
    });
    return ret;
}


function updateFiledep(options){
    //得到全部依赖组件
    var bowerJson = fileUtils.readJSON('bower.json');
    var installDir = process.cwd();
    var moduleNames = {};
    for(var p in bowerJson.dependencies){
        moduleNames[p] = bowerJson.dependencies[p];
    }
    if(bowerJson.glue != null && typeof bowerJson.glue !='undefined'){
        for(var p in bowerJson.glue ){
            moduleNames[p] = bowerJson.glue[p];
        }
    }
    var depInfo = computil.getDepInfo(moduleNames , {'installDir':installDir});
    computil.injectDeps(depInfo , {'src':options.file , 'ignore-path': installDir+'/app/'});
    fileUtils.write('bower.json' , JSON.stringify(bowerJson, null, '  '));
    console.log('update module completed.');
}

// -------------------

update.line = function (argv) {
    var options = update.options(argv);
    return update(options, argv);
};

update.options = function (argv) {
  var knownOpts = {
                   "file" : [String , Array],  //需要
                   "module" : [String, Array]   //组件名称
           };
  var shortHands = {};
  var options =  nopt(knownOpts, shortHands, argv);
  
  if(typeof options.file == 'undefined' || options.file.length == 0){
        options.file = ['app/index.html'];
  }
  
  if(typeof options.module == 'undefined' || options.module.length ==0){
       options.module = [];
  }
  return options;
};

update.completion = function () {
    // TODO:
};

module.exports = update;