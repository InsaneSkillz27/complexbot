

"use strict";

var nopt = require('nopt');
var file = require('../util/file');
var fileUtils = require('file-utils');
var util  = require('../util/util');
var path = require('path');
var Q = require('q');
var chalk = require('chalk');

/**
 * 升级css到指定的版本
 * @param content 需要升级的文件    
 * @param {Array|String} classNames 需要修改的class名称
 * @param {Array|String} newClassNames 新的样式名称
 */

function upgradeCssFile(content , oldNewModules){
	    for(var i=0; i<oldNewModules.length; i++){
	    	//console.log(oldNewModules[i].old)
	    	//console.log(oldNewModules[i].new)
			//var regx = new RegExp("class\\s*=[\'\"]\\b"+oldNewModules[i].old+"\\b" , "ig");
            var regx = new RegExp("(?:[\"\']+|\\s+|[.]?)("+oldNewModules[i].old+")(\\s+|[\"\']+)" , "ig");
			//content = content.replace(regx , oldNewModules[i].new);
            content = content.replace(regx , function(match , cssmodule , offset , str){
                 if(typeof cssmodule == 'undefined'){
                     return match; 
                 }
                 var start = match.indexOf(cssmodule);
                 var startContent = match.substring(0,start);
                 var nextContent = match.substring(start+cssmodule.length);
                 return startContent + oldNewModules[i].new+nextContent;
            });
	    }
	    return content;
}


/**
 * 升级js文件到指定的版本,将require([],function(){}),define("",[],funtion(){})中的模块名称替换
 * @param content 需要升级的内容
 * @param 
 * @param newModuleName 被更新的模块名称
 * @param version  版本名称
 */
function upgradeDefine(content , oldNoduleName , newModuleName){
	
	var defineRegx = /define(?:\s|\n|\r)*\((?:\s|\n|\r)*['"]([^"']*)['"](?:\s|\n|\r)*,?(?:\s|\n|\r)*\[([^\]]*)\]/ig;
	var blocks = content.match(defineRegx);
	
	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(defineRegx , function(match , moduleName , depModules , offset , str){
		    	
	        	var modudleRegx = new RegExp("[\"']+"+oldNoduleName+"(/?[^\"']*)[\"']" , "ig");
	        	depModules = depModules.replace(modudleRegx , function(match , subModuleName , offste , str){
	            	return "\""+newModuleName +subModuleName+"\"";
	        	});

	        	var m = moduleName.split('/');
		        if(m[0] == oldNoduleName){
		        	m[0] = newModuleName;
		        	return "define(\""+m.join('/')+"\" , ["+depModules+"]";
	        	}else{
	        		return match;
	        	}
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}

function upgradeRequireConfig(content, oldModuleName , newModuleName){
	
	var requireConfigRegx = /requirejs.config(?:\s|\n|\r)*\((?:.|\n|\r)*?paths[\s\n\r]*:[\s\n\r]*{([^}]*)}/;
	var blocks = content.match(requireConfigRegx);
	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(requireConfigRegx , function(match , depModules , offset , str){
	        	 var changeDepModules = depModules.replace(/['"]([^'"]*)['"]/ig,function(match , content){
	        	 	   var regx = new RegExp('^'+oldModuleName,'ig')
	        	 	   if(content.match(regx)){
	        	 	   		return match.replace(oldModuleName , newModuleName);
	        	 	   }
                       return match;
	        	 });
	        	 return match.replace(depModules , changeDepModules);
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}


function upgradeRequire(content , oldModuleName , newModuleName){
	var requireRegx = /require(?:\s|\n|r)*\((?:\s|\n|\r)*\[([^\]]*)\]/ig;
    var blocks = content.match(requireRegx);
	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(requireRegx , function(match , depModules , offset , str){
	        	 var changedDepModules = depModules.replace(/['"]([^'"]*)['"]/ig , function(match , content){
	        	 	   var regx = new RegExp('^'+oldModuleName,'ig')
	        	 	   if(content.match(regx)){
	        	 	   		return match.replace(oldModuleName , newModuleName);
	        	 	   }
                       return match;
	        	 });
	        	 return match.replace(depModules , changedDepModules);
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}

function upgradeTagCname(content , oldModuleName, newModuleName){
	var tagRegx = /<[^>]*g-cname\s*=\s*['"]([^'"]*)['"][^>]*>/ig;

	var blocks = content.match(tagRegx);
	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(tagRegx , function(match , moduleName , offset , str){
		    	 var regx = new RegExp('^'+oldModuleName,'ig')
		    	 if(moduleName.match(regx)){
		    	 	return match.replace(oldModuleName , newModuleName);
		    	 }
	        	 return match;
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}


function upgradeRegister(content , oldModuleName , newModuleName){
	var registerRegx = /glue.widgetRegist(?:\s|\n|\r)*\((?:[^,]*,?){0,2}(?:\s|\n|\r)*,(?:\s|\r|\n)*(['"][^'"]*['"])/ig;
	var blocks = content.match(registerRegx);
	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(registerRegx , function(match , moduleName , offset , str){
                /*
                console.log("match : " , match);
                console.log('moduleName :', moduleName);
                console.log('offset : ' , offset);
		    	 var regx = new RegExp('^'+oldModuleName,'ig')
	        	 if(moduleName.match(regx)){
		    	 	return match.replace(oldModuleName , newModuleName);
		    	 }
	        	 return match;
                 */
                var start = match.indexOf(moduleName);
                var startContent = match.substring(0,start);
                var nextContent = match.substring(start+moduleName.length);
                return startContent+"\""+newModuleName+"\""+nextContent;
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}


function upgradeClassName(content  , oldNewModules){
	var classNameRegx = /class\s*=\s*\\?['"]([^'"]*)\\?['"]/ig
	var blocks = content.match(classNameRegx);

	if(blocks && blocks.length>0){
		blocks.forEach(function(block){
		    var changeContent = block.replace(classNameRegx , function(match , classNames , offset , str){
		    	  var changedClassName = classNames;
		    	  for(var i=0 ; i<oldNewModules.length; i++){
		    	  	 changedClassName = changedClassName.replace(oldNewModules[i].old , oldNewModules[i].new);
		    	  }
		    	  return match.replace(classNames , changedClassName);
	        });
	        content = content.replace(block , changeContent);
		});
	}
	return content;
}

/**
 * @param fileNames 文件名
 * @param oldNewModules 旧模块名
 * @param chMd5Name 是否修改文件md5名
 */
function  upgradejs(fileNames , oldModuleName , newModuleName , chMd5Name){
	
		var fileNamas = (typeof fileNames == 'string') ? [fileNames] : fileNames;
		fileNames.forEach(function(fileName){
			var content = fileUtils.read(fileName);
			content = upgradeDefine(content , oldModuleName , newModuleName);
			content = upgradeRequireConfig(content , oldModuleName , newModuleName);
			content = upgradeRequire(content , oldModuleName , newModuleName);
			content = upgradeTagCname(content , oldModuleName , newModuleName);
			content = upgradeRegister(content , oldModuleName , newModuleName);
			/*
			if(chMd5Name){
				var suffix = md5suffix(content);
				var exname = path.extname(fileName)
				var newpathName = fileName.substring(0 , fileName.indexOf(exname));
    			newpathName = newpathName.substring(0 , newpathName.lastIndexOf('_'));
    			newpathName += '_'+suffix+exname;
    			fileName = newpathName;
			}
			*/
	        fileUtils.write(fileName , content);
		});
}

/**
 * @param fileNames 文件名
 * @param oldNewModules 旧模块名
 * @param chMd5Name 是否修改文件md5名
 */
function  upgradecss(fileNames , oldNewModules , chMd5Name){

		var fileNamas = (typeof fileNames == 'string') ? [fileNames] : fileNames;
		fileNames.forEach(function(fileName){
			var content = fileUtils.read(fileName);
			content = upgradeClassName(content , oldNewModules);
			content = upgradeCssFile(content , oldNewModules);
			/*
			if(chMd5Name){
				var suffix = md5suffix(content);
				var exname = path.extname(fileName)
				var newpathName = fileName.substring(0 , fileName.indexOf(exname));
    			newpathName = newpathName.substring(0 , newpathName.lastIndexOf('_'));
    			newpathName += '_'+suffix+exname;
    			fileName = newpathName;
			}
			*/
	        fileUtils.write(fileName , content);
		});
}

/**
 * options 配置
 *   {newVersion : '' , newVersion : '' , name : '项目名'}
 */
function  chver(options) {

	if(!condition(options)){
    	throw new Error('chver error');
    }

	var chversion = options.newVersion; //需要替换的版本
	var version = options.oldVersion == '' ? '' :  '#'+options.oldVersion; //原始版本
	var name = options.name;  //项目名称
	var oldVersion = name+version;
	var newVersion = name+"#"+chversion;
	var dirs = options.dirs;
	if(typeof dirs == 'undefined'){
		dirs = ['app' , 'dist'];
	}

	dirs.forEach(function(dir){
		var match = fileUtils.expand('./'+dir+'/scripts/**/*.js','./'+dir+'/*.html');
		var chMd5Name = dir == 'dist';
		upgradejs(match , oldVersion ,newVersion , chMd5Name);
		
	});

	//修改css,需要读取css的需要替换的列表
	var moduleNames = fileUtils.read('./cssmodule');
	var block = moduleNames.match(/(.*)/gi);
	var oldNewModules = [];
	version = options.oldVersion == '' ? '' :  '__'+options.oldVersion;

	block.forEach(function(module){
		 if(module == ''){
		 	return;
		 }
		 var _temp = {};

		 _temp.old = module+version.replace(/\./g,'');
		 _temp.new = module+'__'+chversion.replace(/\./g,'');
		 oldNewModules.push(_temp);
	})

	dirs.forEach(function(dir){
		var match = fileUtils.expand('./'+dir+'/styles/**/*.css','./'+dir+'/*.html' , './'+dir+'/scripts/**/*.js' , './'+dir+'/tpls/**/*.html');
		var chMd5Name = dir == 'dist';
		upgradecss(match ,oldNewModules , chMd5Name);
    });
}


chver.line = function (argv) {
    var options = chver.options(argv);
    var packageJson = fileUtils.readJSON('package.json');
    var name = packageJson.name;
    var newVersion = options.nv;
    var oldVersion = options.ov;
    var first = options.first;
    var dirs = options.dirs;
    if(typeof dirs == 'undefined' || dirs == '' || dirs == null){
    	dirs = ['app' , 'dist'];
    } 
    
    if(!condition(options)){
    	return;
    }
    if(first){
    	oldVersion = "";
    }else{
    	if(typeof oldVersion == 'undefined' || oldVersion == null || oldVersion == ''){
    		oldVersion = packageJson.version;
        }
    }
    if(typeof newVersion == 'undefined' || newVersion == null || newVersion == '') {
    	console.log(chalk.red('new version(--nv) not set'));
    	return;
    }

    var backfiles = [];
    dirs.forEach(function(dir){
        var match = fileUtils.expand('./'+dir+'/scripts/**/*.js','./'+dir+'/*.html' , './'+dir+'/styles/**/*.css' , './'+dir+'/tpls/**/*.html');
        backfiles.push.apply(backfiles , match);
    });
    var backFilecontent = util.backFile(backfiles);
    try{
    	chver({'newVersion':newVersion,'oldVersion':oldVersion,'name':name , 'dirs' : dirs , 'first':options.first});
    	packageJson.version = newVersion;
    	fileUtils.write('package.json' , JSON.stringify(packageJson, null, '  '));
    	fileUtils.write('./.chverfirst' , 'true');
	}catch(error){
		console.log(chalk.red('has error') , error);
		console.log(chalk.red('start recoveFile ....'));
		util.recoveFile(backFilecontent);
		if(first){
			fileUtils.delete('./.chverfirst');
		}
	}
};


function condition(options){
	var hasversion = fileUtils.exists('./.chverfirst'); //如果有first文件则就是处理过一次
    if(hasversion && options.first){
    	console.log(chalk.red('areadly first chver , please set user \'fpm chver --nv  version --ov version\''));
    	return false;
    }else if(!hasversion && !options.first){ //如果没有初始自行修改版本，则需要修改
    	console.log(chalk.red('please  first user \' fpm chver --first --nv version\''));
    	return false;
    };
    return true;
}

chver.options = function (argv) {
    var knownOpts = {
                   "nv" : String,   //新版本 newVersion
                   "ov" : String,   //版本号 oldVersion
                   "first" : Boolean, //是否是第一次修改版本,如果是第一次修改则ov设置为空
                   "dir" : [String ,Array]   //需要更新的文件目录
                };
    var shortHands = {};
    return nopt(knownOpts, shortHands, argv);
};

chver.completion = function () {
    //TODO:
};

module.exports = chver;
