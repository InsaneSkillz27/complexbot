/**
 * 创建项目
 * iffront project [--appname xxx] [--mode requirejs | script] , 
                   --appname 不指定 默认为当前所在目录名称
                   --mode 不指定默认为requore.config方式
 */

"use strict";

var path = require('path');
var file = require('file-utils'); //文件处理工具
var cli = require('../util/cli');  //命令行
var createError = require('../util/createError');
var shell = require('shelljs');
var cmd = require('../util/cmd');
var nopt = require('nopt');

var ejs = require('ejs'); //模板引擎
ejs.open = '{{';
ejs.close = '}}';

var cwd = process.cwd();  //得到当前工作目录
var gitusername = '';
var gituseremail = '';
var appname = '';
function writeFile(srcfile , tofile , options) {  
  var  srcPath = path.resolve(__dirname, './templates/'+srcfile);
  var template =  file.read(srcPath);
  file.write(cwd+'/'+tofile, ejs.render( template , options));
}


function cpoy(srcfile , tofile){
  var  patch = path.resolve(__dirname, './templates/'+srcfile);
  tofile = tofile || srcfile;
  file.copy(patch , cwd+"/"+tofile);
}

//初始化项目结构
function initProject(options){

    file.mkdir(cwd+'/app');
    file.mkdir(cwd+'/app/scripts');
    file.mkdir(cwd+'/app/styles');
    file.mkdir(cwd+'/app/images');
    file.mkdir(cwd+'/docs');
    cpoy('测试报告模板.xlsx', 'docs/测试报告模板.xlsx');
    cpoy('上线测试重点.txt', 'docs/上线测试重点.txt' , options);
    cpoy('制作文件测试重点.txt', 'docs/制作文件测试重点.txt' , options);
    writeFile('index.html', 'app/index.html' , options);
    writeFile('index.html', 'app/index.tmpl' , options);
    writeFile('version.js', 'app/scripts/version.js' , options);
    writeFile("README.md" , "app/styles/"+ options.appname+".css" , options);
    writeFile("Gruntfile.js" , "Gruntfile.js" , options);
    writeFile("_package.json" , "package.json" , options);
    writeFile("_bower.json" , "bower.json" , options);
    writeFile("gitattributes" , ".gitattributes" , options);
    writeFile("gitignore" , ".gitignore" , options);
    writeFile("jshintrc" , ".jshintrc" , options);
    writeFile("bowerrc" , ".bowerrc" , options);
    writeFile("README.md" , "app/scripts/README.md" , options);
    writeFile("README.md" , "app/styles/README.md" , options);
    writeFile("README.md" , "app/images/README.md" , options);
}

//安装Npm包
function installNpm(){
    //询问是否自动安装npm包
    if(shell.exec("npm install").code !== 0){
        console.log("Error: npm install failed");
    }
}

function project(options){

      return getGitUserName().spread(function(stdout, stderr){
                   //获取用户git账户
                  var gitusername = replaceEnter(stdout);
                  options.username = gitusername;
                  options.username_tolowcase = options.username.toLowerCase();
                  options.ptype = 'project';
                  return getGitUserEmail();
              },function(error){
                  console.log('create project error : '+ error);
                  return null;
              }).spread(function(stdout, stderr){
                  var gituseremail = replaceEnter(stdout);
                  options.useremail = gituseremail;
                  return getGitHostName();
              } , function(error){
                  console.log('create project error : '+ error);
                  return null;
              }).spread(function(stdout, stderr){
                  var githostname = replaceEnter(stdout);
                  options.hostname = githostname;
                  startProject(options);
                  return null;
              } , function(error){
                  console.log('没有设置 host，请使用 fpm initconfig 进行设置');
                  console.log('create project error : '+ error);
                  return null;
              });
}


function replaceEnter(str){
    return  str.replace(/\r\n/g.test(str) ? '\r\n' : '\n' , '');
}

function startProject(options){
     options.appname = options.appname || path.basename(process.cwd());
     options.groupName = options.groupName || '';
     options.appname_tolowcase = options.appname.toLowerCase();
     options.mode = options.mode || 'requirejs';  //默认为require.config方式
     try{
         initProject(options);
         // 以后的项目里不需要安装依赖包，依赖包已经安装在了公用目录下面。
         // installNpm();
         console.log('project create complete.');
     }catch(error){
         console.log('error'  + error);
     }  
}

function getGitUserName(){
    return cmd("git" , ['config' ,'user.name']);
}

function getGitHostName() {
    return cmd("git" , ['config' ,'user.hostname']);
}

function getGitUserEmail(){
    return cmd("git" , ['config' ,'user.email']);
}

//安装依赖的组件
function installCompemts(){
   //询问需要安装的组件，该组件从自己的系统库中查询
}


// ------------------- 接口方法

project.line = function (argv) {
    var options = project.options(argv);
    return project(options);
};

project.options = function (argv) {
    //return cli.readOptions(argv);
    var knownOpts = {
                   "mode" : String,  //项目的安装模式 requirejs模式 还是 script 脚本模式，默认为 require
                   "appname" : String    //项目名称，如果不填使用当前目录
                };
    var shortHands = {};
    return nopt(knownOpts, shortHands, argv);
};

project.completion = function () {
    // TODO:
};

module.exports = project;