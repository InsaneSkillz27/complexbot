
"use strict";

var bower = require('bower');     //bower组件安装
var defaultConfig = require('../config');
var nopt = require('nopt');
var wm = require('wm');  //组件(widget)管理
var computil = wm.ComponentUtils; //组件工具
var fileUtils = require('file-utils');
var util = require('../util/util')
/**
 * 卸载一个组件  iffront uninstall moduleName.
 * @moduleName 组件名称
 */
function uninstall(options , argv) {
    
    
   var moduleNames = options.module;
   var installDir = process.cwd();
   moduleNames = processModuleName(moduleNames);
   if(moduleNames.length >0){
      bower.commands.uninstall(moduleNames , { save: true } , {'cwd' : installDir , 'registry': defaultConfig.registry , "strictSsl":false}).on('end'  , function(result){
           //得到全部依赖组件
            var bowerJson = fileUtils.readJSON('bower.json');
            var _moduleNames = {};
            var hasuninstall = false;

            for(var i =0 ; i<moduleNames.length ; i++){
               if(moduleNames[i].indexOf('glue')!=-1){
                  hasuninstall = true;
                  continue;
               }
            }
            for(var p in bowerJson.dependencies){
                  _moduleNames[p] = bowerJson.dependencies[p];
            }

            if(bowerJson.glue != null && typeof bowerJson.glue !='undefined' && !hasuninstall){ //如果已经就不需要在注入了
               for(var p in bowerJson.glue ){
                  _moduleNames[p] = bowerJson.glue[p];
               }
            }
            if(hasuninstall){
               delete bowerJson.glue;
            }
            var depInfo = computil.getDepInfo(_moduleNames ,{'installDir':installDir});
            computil.injectDeps(depInfo , {'src':options.file , 'ignore-path': installDir+'/app/'});
            fileUtils.write('bower.json' , JSON.stringify(bowerJson, null, '  '));
            console.log('uninstall components script completed.');

      }).on("error" , function(error){
         console.log(error);
      });
   }else{
      console.log('has not a moduleName specified');
   }
}

function processModuleName(moduleNames){
    var ret = [];
    moduleNames.forEach(function(moduleName){
        ret.push(moduleName.replace('#' ,'__'));
    });
    return ret;
}

// -------------------

uninstall.line = function (argv) {
    var options = uninstall.options(argv);
    return uninstall(options, argv);
};

uninstall.options = function (argv) {
  var knownOpts = {
                   "file" : [String , Array],  //需要
                   "module" : [String, Array]   //组件名称
           };
  var shortHands = {};
  var options =  nopt(knownOpts, shortHands, argv);
  
  if(typeof options.file == 'undefined' || options.file.length == 0){
        options.file = ['app/index.html'];
  }
  
  if(typeof options.module == 'undefined' || options.module.length ==0){
       console.log('please input moduleName , use --module moduleName');
       throw new Error('please input moduleName , use --module moduleName');
  }
  return options;
  
};

uninstall.completion = function () {
    // TODO:
};

module.exports = uninstall;