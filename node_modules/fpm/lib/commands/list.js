"use strict";

var bower = require('bower');     //bower组件安装
var defaultConfig = require('../config');
var cli = require('../util/cli');  //命令行
var archy = require('archy');
var mout = require('mout');
var chalk = require('chalk');
var nopt = require('nopt');

/**
 * 显示树形结构信息
 * @param node 节点
 * @deep 显示深度
 */
function tree2archy(node , deep) {
    
    var dependencies = mout.object.values(node.dependencies);
    var version = !node.missing ? node.pkgMeta._release || node.pkgMeta.version : null;
    var label = node.endpoint.name + (version ? '#' + version : '');
    var update;
    if (node.root) {
        label += ' ' + node.canonicalDir;
    }
    // State labels
    if (node.missing) {
        label += chalk.red(' not installed');
        return label;
    }
    if (node.different) {
        label += chalk.red(' different');
    }
    if (node.linked) {
        label += chalk.magenta(' linked');;
    }
    if (node.incompatible) {
        label += chalk.yellow(' incompatible') + ' with ' + node.endpoint.target;
    } else if (node.extraneous) {
        label += chalk.green(' extraneous');
    }
    // New versions
    if (node.update) {
        update = '';
        if (node.update.target && node.pkgMeta.version !== node.update.target) {
            update += node.update.target + ' available';
        }
        if (node.update.latest !== node.update.target) {
            update += (update ? ', ' : '');
            update += 'latest is ' + node.update.latest;
        }
        if (update) {
            label += ' (' + chalk.cyan(update) + ')';
        }
    }
    if (!dependencies.length || deep == 0) {
        return label;
    }
    
    return {
        label: label,
        nodes: mout.object.values(dependencies).map((function(deep){
                                                       return  function(node){
                                                                    var ret = tree2archy(node , deep)
                                                                    return ret;
                                                               };
                                                    })(deep-1))
    };
}

/**
 * 查看暗转组件列表
 * iffront list
 */
function  list(options) {
    options = options || {}
    options.offline =  options.offline || true;
    options.paths = options.paths || false;
    var expand = options.expand || false;
    bower.commands.list({'offline':options.offline , 'paths':options.paths} , {'registry': defaultConfig.registry , "strictSsl":false }).on('end' , function(result){
        
           if(options.paths){
                console.log(result); 
                return;
           }
           
           var cliTree;
           if(expand){
              cliTree = tree2archy(result , 200);
           }else{
              cliTree = tree2archy(result , 1); //显示两层
           }
           process.stdout.write(archy(cliTree));
    });
}




// -------------------

list.line = function (argv) {
    var options = list.options(argv);
    return list(options);
};

list.options = function (argv) {
    
    var knownOpts = {
                   "offlint" : Boolean,  //需要
                   "paths" : Boolean,   //组件名称
                   "expand" : Boolean
                };
  var shortHands = {};
  return  nopt(knownOpts, shortHands, argv);
    
};

list.completion = function () {
    // TODO:
};

module.exports = list;
