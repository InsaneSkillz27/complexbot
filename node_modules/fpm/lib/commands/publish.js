
"use strict";

var shell = require('shelljs');
var prompt = require('../util/prompt');
var colors = require('../util/colors');
var nopt = require('nopt');
var fileUtils = require('file-utils');
var util = require('../util/util');
var chver = require('./chver');
var cmd = require('../util/cmd');
// var Promise = require('bluebird')
var rp = require('request-promise')
const path = require('path')


function publish(options2) {
	shell.exec("grunt build", (code, stdout, stderr) => {
		if (code != 0) {
			colors.red("Error: fpm build failed")
		}
		shell.exec("grunt replacecdn", (code, stdout, stderr) => {
			if (code != 0) {
				colors.red("Error: fpm replacecdn failed")
			}
			var options = [{
				message: '请输入您的AppName',
				name: 'userkey',
				require: true
			}];
			return prompt(options).then((result) => {
				var userkey = result.userkey;
				shell.exec("grunt uploadcdn --userKey " + userkey, (code, stdout, stderr) => {
					if (code != 0) {
						colors.red("Error: fpm uploadcdn failed")
					}
					gitcommit(options2)
				})
			})
		})
	})
}


function gitcommit(options) {
	var backfiles = [];
	var dirs = ['dist']
	var message = 'publish';
	dirs.forEach(function(dir) {
		var match = fileUtils.expand('./package.json', './' + dir + '/*.html')
		backfiles.push.apply(backfiles, match)
	});
	var backfilecontents = util.backFile(backfiles); //备份文件
	var syn = options.syn || false;
	var version = options.tag;
	return postRequest(backfilecontents)

}

function postRequest(backfilecontents) {
	var dirName2 = process.cwd()
	dirName2 = dirName2 + '/package.json'
	var pagePackage = require(dirName2);
	var url = "http://nyx.staff.ifeng.com/project/api/nyxCut4fe/getPost";
	var backfilecontents = JSON.stringify(backfilecontents)
	var postOption = {
		method: 'POST',
		uri: url,
		body: {
			pagePackage:pagePackage,
			backfilecontents: backfilecontents
		},
		json: true
	}
	return rp(postOption).then(function(ret) {
		console.log("ret%%%%%%%%%%%", ret);
		return ret;
	})
}

/**
 * 将修改的文件、版本信息提供到远端服务器
 */
function commitRemote() {
	return cmd('git', ['status']).then(function(result) {
		var regx = /\s*On\s*branch\s*(\S*)\s*.*[\r|n]*/i;
		var matchs = regx.exec(result);
		console.log("matchs^^^^^^^^^", matchs[1])
		if (typeof matchs != 'undefined' && matchs.length && matchs.length > 0) {
			console.log('push  to branch ' + matchs[1]);
			return cmd('git', ['push', '--tag', '--progress', 'origin', matchs[1]])
				.then(function(res) {
					console.log('res=============>', res)
					return res;
				});
		}
		console.log('waring : no find branch , use default set . please confirm.');
		return cmd('git', ['push', '--tag', '--progress', 'origin']);
	});

}

/**
 * 本地提交版本信息
 */
function commitLocalVersion(version) {
	if (typeof version != "undefined" && version != "") {
		return cmd('git', ['tag', version]);
	} else {
		return [];
	}
}

/*
 * 提交文件到本地head
 */
function commitLocalFile(message) {
	console.log("message", message)
	return cmd('git', ['commit', '-a', '--m', '"' + message + '"']).then(
		function(data) {
			return []; //提交成功
		},
		function(data) {
			//提交失败。
			var stdout = data.stdout;
			if (stdout.match(/\s*nothing\s*to\s*commit\s*/ig)) {
				//git commit当没有数据可以提交是返回的code==1
				//这里需要处理没有数据提交的情况，如果是没有数据提交则返回正常。
				return [];
			}
			throw new Error(data);
		},
		function(data) {
			//回显通知
			return [];
		}
	)
}

function addUnTrackFileToLocal() {
	return cmd('git', ['add', '-A', '.']); //提交目录下所有unstage文件
}


publish.line = (argv) => {

	var options2 = publish.options(argv);

	publish(options2)
}


publish.options = function(argv) {
	var knownOpts = {
		"syn": Boolean, //是否同步服务器
		"tag": String, //版本号
		"main": [String, Array], //系统压缩后的主文件
		"cdn": [String, Array], //系统对应的cdn文件
	};
	var shortHands = {};
	return nopt(knownOpts, shortHands, argv);
}

publish.completion = function() {
	// TODO:
}

module.exports = publish;
