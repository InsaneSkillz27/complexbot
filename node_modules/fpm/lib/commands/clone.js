"use strict";

var fs = require('fs');
var path = require('path');

var Q = require('q');
var nopt = require('nopt');

var git = require('../util/gitlab');
var util = require('../util/util');
var colors = require('../util/colors');
var cmd = require('../util/cmd');

/**
 * 从git配置信息中获取用户信息
 * @param  {Object} gitLabInfo 初始配置信息
 * @return {Promise}           返回一个用户信息对象的Promise对象
 */
var getUserInfo = function (gitLabInfo) {
  var deferred = Q.defer();
  var login = cmd('git', ['config', 'user.name']);
  var email = cmd('git', ['config', 'user.email']);
  var password = cmd('git', ['config', 'user.password']);
  Q.all([login, email, password])
      .spread((login, email, password) => {
        login = login[0] ? login[0].replace(/(\r|\n)/g, '') : login[0];
        email = email[0] ? email[0].replace(/(\r|\n)/g, '') : email[0];
        password = password[0] ? password[0].replace(/(\r|\n)/g, '') : password[0];
        if (!login || !email || !password) {
          deferred.reject({message: '没有找到用户信息，请先使用 fpm initconfig 来设置用户信息'});
        } else {
          deferred.resolve({
            login: login,
            password: password
          });
        }
      })
      .catch(() => {
        deferred.reject({message: '没有找到用户信息，请先使用 fpm initconfig 来设置用户信息'});
      });

  return deferred.promise;
};

/**
 * clone 一个项目
 * @param  {Object} options 配置项
 * @return {[type]}         [description]
 */
var clone = function (options) {
  var name = options.name;
  if (!name) {
    console.log(colors.red('请填写需要clone的项目名称 fpm clone --name xxx'));
    return;
  }

  // 获取注册的用户信息
  var userInfo = getUserInfo();

  // 获取用户token
  var token = userInfo
                    .then(git.getToken);

  Q.all([name, token])
    .spread(git.getProjectByName)
    .then(function (project) {
      return project.http_url_to_repo;
    })
    .then(git.clone)
    .then(function () {
      console.log(colors.green('项目clone成功'));
    })
    .catch(function (e) {
      console.log(colors.red(e.message || e));
      if (e.e) {
        console.log(colors.red(e.e));
      }
    });
};

// -------------------

clone.line = function (argv) {
  var options = clone.options(argv);
  return clone(options);
};

clone.options = function (argv) {
  var knownOpts = {
    "name" : String   //项目名
  };
  var shortHands = {};
  return nopt(knownOpts, shortHands, argv);
};

module.exports = clone;