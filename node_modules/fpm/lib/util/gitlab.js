'use strict';

var http = require('http');
var querystring = require('querystring');

var Q = require('q');
var mout = require('mout');

var cmd = require('./cmd');


var __gitlabAjax = function (host, action, data, options) {
  options = options || {};
  var deferred = Q.defer();
  var reqData = querystring.stringify(data);
  var reqOptions = {
    // host: 'ipm.staff.ifeng.com',
    // host: '172.30.84.165',
    host: host,
    port: 80,
    method: 'POST',
    path: '/api/v3/' + action,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': reqData.length
    }
  };
  mout.object.mixIn(reqOptions, options);

  var req = http.request(reqOptions, function (response) {
    var responseText=[];
    var size = 0;
    response.on('data', function (data) {
      responseText.push(data);
      size += data.length;
    });
    response.on('end', function () {
      // Buffer 是node.js 自带的库，直接使用
      responseText = Buffer.concat(responseText,size);
      // console.log(action, '=======>', responseText.toString(), '<========');
      var msg = JSON.parse(responseText.toString());
      if (msg.message) {
        deferred.reject(msg);
      } else {
        deferred.resolve(msg);
      }
    });
  });

  req.on('error', function (e) {
    // console.log('网络出现问题，请稍后再试');
    deferred.reject({message: '网络出现问题，请稍后再试', event: e});
  });

  req.write(reqData);
  req.end();
  return deferred.promise;
};

/**
 * 对gitlabApi的请求进行封装
 * @param  {String} action  请求类型
 * @param  {Object} data    查询参数
 * @param  {Object} options 配置类型，主要需要改的是 method
 * @return {Promise}        Promise对象
 */
var gitlabAjax = function (action, data, options) {
  return cmd('git', ['config', 'user.hostname'])
    .spread(function (tdout, stderr) {
      var host = tdout.replace(/(\r|\n)/g, '');
      return __gitlabAjax(host, action, data, options);
    }, function (e) {
      throw(new Error('没有设置 host，请使用 fpm initconfig 进行设置'));
    });
};

/**
 * 通过gitLab api获取用户信息中的private_token
 * @param  {Object} userInfo {login: 'test', email: 'test@ifeng.com', password: '12345678'}
 * @return {Promise}         返回一个Promise对象，正确返回session的时候，可以获取到private_token;
 */
var getToken = function (userInfo) {
  // console.log("getToken arguments ===> ", userInfo);
  return gitlabAjax('session', userInfo)
            .then(function (msg) {
              // console.log('token======> ', msg.private_token);
              return msg.private_token;
            });
};

/**
 * 判断项目是否已经存在（在当前用户所能访问到的）
 * @param  {String}  projectName 项目名
 * @param  {String}  token       用户的token
 * @return {Promise}             返回一个Promise对象，正确返回时，可以知道项目是否存在
 */

var hasProject = function (projectName, token) {
  // console.log("hasProject===>", projectName, token);
  return gitlabAjax('projects', {private_token: token}, {method: 'GET'})
            .then(function (projects) {
              // console.log(projects);
              var deferred = Q.defer();
              var isCreate = false;

              for (var project of projects) {
                if (project.name === projectName) {
                  isCreate = true;
                  break;
                }
              }

              deferred.resolve(isCreate);
              return deferred.promise;
            });
};

/**
 * 创建一个项目
 * @param  {String} projectName 项目名称
 * @param  {String} token       用户token
 * @return {Promise}            返回一个Promise对象，正确返回时，可以获取新建项目的信息
 */
var createProject = function (projectName, token, groupId) {
  // console.log('createProject===> ', projectName, token);
  return hasProject(projectName, token)
            .then(function (isCreat) {
              var deferred = Q.defer();
              if (isCreat) {
                deferred.reject({message: '该项目已被创建，请重新命名'});
              } else {
                deferred.resolve(false);
              }
              return deferred.promise;
            })
            .then(function () {
              var params = {name: projectName, private_token: token, public: true};
              if (groupId) {
                params.namespace_id = groupId;
              }
              return gitlabAjax('projects', params);
            })
            .catch(e => {throw(new Error('项目创建失败===>' + JSON.stringify(e.message)))});
};

/**
 * 将项目转移到指定的组中
 * @param  {Number} groupId   组id
 * @param  {Number} projectId 项目id
 * @return {Promise}          返回一个Promise对象，正确返回时，转移成功。
 */
var transferProject = function (groupId, projectId) {
  var tk = {
    'ipm.staff.ifeng.com': 'BeFRwjof56keksVb5GLY',
    'fex.staff.ifeng.com': 'cmP4qLXxbxytT4Ks-SyC'
  };
  return cmd('git', ['config', 'user.hostname'])
    .spread(function (tdout, stderr) {
      var host = tdout.replace(/(\r|\n)/g, '');
      console.log(groupId, projectId, tk[host]);
      console.log(host);
      if (tk[host]) {
        return gitlabAjax('groups/' + groupId + '/projects/' + projectId, {private_token: tk[host]});
      } else {
        throw(new Error('设置的git没有对应权限，请联系开发者'));
      }
    }, function (e) {
      throw(new Error('没有设置 host，请使用 fpm initconfig 进行设置'));
    });
};

/**
 * 通过项目id获取项目信息
 * @param  {Number} id    项目id
 * @param  {String} token 用户token
 * @return {Promise}      返回一个Promise对象，正确返回时，可以获取到项目信息。
 */
var getProject = function (id, token) {
  return gitlabAjax('projects/' + id, {private_token: token}, {method: 'GET'});
};

/**
 * 通过项目名称获取项目信息，只能获取到当前用户所拥有的项目
 * @param  {String} projectName 项目名
 * @param  {String} token       用户token
 * @return {Promise}            返回一个Promise对象，正确返回时，可以获取到项目信息。
 */
var getProjectByName = function (projectName, token) {
  return gitlabAjax('projects', {private_token: token}, {method: 'GET'})
            .then(function (projects) {
              // console.log(projects);
              var deferred = Q.defer();
              projects.some(function (project) {
                console.log(project.name);
                if (project.name === projectName) {
                  deferred.resolve(project);
                  return true;
                }
              });
              deferred.reject({message: '该用户不存在名为（' + projectName + '）的项目'});
              return deferred.promise;
            });
};

/**
 * 获取当前用户所在的组
 * @param  {String} token 用户标识
 * @return {Promise}      含有用户组信息的Promise对象
 */
var getOwnGroup = function (token) {
  return gitlabAjax('groups', {private_token: token}, {method: 'GET'});
};

var getGroupById = function (id, token) {
  return gitlabAjax('groups/' + id, {private_token: token}, {method: 'GET'});
};
/**
 * clone一个已有项目
 * @param  {String} path 项目在git中对应的http地址
 * @param  {String} dir  项目clone到的目录，如果没有指定，按照git中项目的目录进行clone
 * @return {Promise}     返回一个Promise对象，正确返回时，clone成功。
 */
var clone = function (path, dir) {
  var options = ['clone'];
  for (var i = 0, iLen = arguments.length; i < iLen; i++) {
    options.push(arguments[i]);
  }
  // console.log(path, dir);
  return cmd('git', options);
};

module.exports = {
  getToken: getToken,
  getProject: getProject,
  getProjectByName: getProjectByName,
  hasProject: hasProject,
  transferProject: transferProject,
  createProject: createProject,
  clone: clone,
  getOwnGroup: getOwnGroup,
  getGroupById: getGroupById
};



// gitlabAjax('groups', {private_token: 'g43kY5Ps5q5qhY79hBzr'}, {method: 'get'})
//             .then(function (msg) {console.log(msg);});

// gitlabAjax('groups/3/members', {private_token: 'g43kY5Ps5q5qhY79hBzr'}, {method: 'get'})
//             .then(function (msg) {console.log(msg);});

// getToken({login: 'zhanglin', password: 'Star_______1202'})
//   .then(msg => console.log(msg))
//   .catch(msg => console.log(msg));

// TgXkis_z_4BQ9UszAq4U

// getOwnGroup('g43kY5Ps5q5qhY79hBzr')
//   .then(msg => console.log(msg))
//   .catch(msg => console.log(msg));

// gitlabAjax('projects', {name: 'xx323', namespace_id: '3', private_token: 'g43kY5Ps5q5qhY79hBzr', public: true})
//   .then(msg => console.log(msg))
//   .catch(msg => console.log(msg));


// getToken({login: 'test', password: '12345678'})
//   .then(msg => console.log(msg));

// getOwnGroup('cmP4qLXxbxytT4Ks-SyC')
//     .then(msg => console.log(msg))
//     .catch(msg => console.log(msg));

// gitlabAjax('projects', {private_token: 'phVW188tfdNmo_6mVAUv'}, {method: 'GET'})
//             .then(function (projects) { console.log(projects)});
