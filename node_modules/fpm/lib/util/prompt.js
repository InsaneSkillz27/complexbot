'use strict';
var Q = require('q');
var colors = require('./colors');

var formatOptions = function (options) {
  options = options || [];
  var result = [];
  var index = 1;
  for (var option of options) {
    result.push(colors.yellow(`${index}. ${option.view}\n`));
    index++;
  }

  return result.join('');
};

var formatInfo = function (option) {
  if (option.default) {
    return colors.yellow(`(默认值为 ${option.default} 回车使用默认值，输入内容替换默认值)\n`);
  }

  if (option.require) {
    return colors.yellow(`(必填)\n`);
  } else {
    return colors.yellow(`(可选，回车略过)\n`);
  }
};

var formatInput = function (option) {
  return option.options ? colors.green('请输入上面的选项序号: ') : colors.green('请输入: ');
};

var formatMessage = function (option) {
  return option.message + formatInfo(option) + formatOptions(option.options) + formatInput(option);
};

/**
 * 和用户交互的命令行输入
 * @param  {Object} options 交互配置
 * @return {Promise}        返回一个含有用户输入结果的Promise对象。
 * options 说明
 *    message {String}      描述信息
 *    name    {String}      返回数据的属性名
 *    default {String}      默认值
 *    require {Boolean}     是否必填
 *    options {value(值), view(显示项)}   选择项，用户只用输入选项号即可获得对应的value值。
 */
var prompt = function (options) {
  var deferred = Q.defer();
  var result = {};
  process.stdin.setEncoding('utf8');
  var index = 0;
  process.stdout.write(formatMessage(options[index]));
  process.stdin.on('readable', function prompt () {
    var option = options[index];
    option.default = option.default || '';
    var content;
    var chunk = process.stdin.read();
    if (chunk !== null) {
      content = chunk.replace(/(\r|\n)/g, '') || option.default;
      if (content === '' && option.require) {
        process.stdout.write(colors.red('该项不能为空，请填写\n'));
        process.stdout.write(formatMessage(options[index]));
        return;
      }
      if (option.options) {
        if (option.options[content - 1]) {
          result[option.name] = option.options[content - 1].value;
        } else {
          process.stdout.write(colors.red('选项输入错误，请输入选项对应的序号\n'));
          process.stdout.write(formatMessage(options[index]));
          return;
        }
      } else {
        result[option.name] = content;
      }
      if (options.length > index + 1) {
        index ++;
        process.stdout.write(formatMessage(options[index]));
      } else {
        deferred.resolve(result);
        process.stdin.removeListener('readable', prompt);
      }
    }
  });


  return deferred.promise;
};

module.exports = prompt;

// var options = [{
//   message: '请输入您的git用户名',
//   require: true,
//   name: 'login',
//   default: 'test'
// }, {
//   message: '请输入您的git邮箱',
//   name: 'email'
// }, {
//   message: '请输入你的git密码',
//   require: true,
//   name: 'password'
// }, {
//   message: '请选择自己的项目所在的组',
//   require: true,
//   options: [{value: 44, view: '制作组'}, {value: 55, view: '开发组'}],
//   name: 'groupId'
// }
// ];

// prompt(options)
//   .then(function (msg) {
//     console.log(msg);
//     process.exit();
//   });

// var opt = [{value: 44, view: '制作组'}, {value: 55, view: '开发组'}];
// console.log(formatOptions(opt));