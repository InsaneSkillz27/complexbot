#!/usr/bin/env node

"use strict";

process.bin = process.title = 'iffront';

var path = require('path');
var fs = require('fs');
var os = require('os');
var mout = require('mout');
var osenv = require('osenv');
var iffront = require('../lib');
var pkg = require(path.join(__dirname, '..', 'package.json'));
var cli = require('../lib/util/cli');
var updateNotifier = require('update-notifier');
var colors = require('../lib/util/colors');

var options;
var command;
var commandFunc;
var notifier;

options = cli.readOptions({
    version: { type: Boolean, shorthand: 'v' }
});

if (options.version) {
    process.stdout.write(pkg.version + '\n');
    process.exit();
}

while (options.argv.remain.length) {
    command = options.argv.remain.join(' ');

    //Alias lookup
    if (iffront.abbreviations[command]) {
        command = iffront.abbreviations[command].replace(/\s/g, '.');
        break;
    }
    command = command.replace(/s/g, '.');
    // Direct lookup
    if (mout.object.has(iffront.commands, command)) {
        break;
    }
    options.argv.remain.pop();
}

// 在执行命令前，先判断是否有全局的安装包支持。
var getRoot = () => {
  var platform = os.platform();
  var root;
  if (platform === 'win32') {
      root = path.parse(process.cwd()).root;
  } else {
      root = os.homedir();
  }
  return root;
};

(function(){
    var ignoreList = ['installenv',
        'project',
        'module',
        'create',
        'initconfig',
        'clone',
        'list'];
    if (ignoreList.indexOf(command) >= 0) {
        return;
    }
    var devDepends = require(path.resolve(__dirname, '../lib/commands/templates/_envpackage.json')).devDependencies;
    var dir;
    var root = getRoot();
    for (var key in devDepends) {
        dir = path.join(root, 'node_modules', key);
        if (!fs.existsSync(dir)) {
            console.log(colors.red('缺少项目开发需要的开发环境或者环境已经更新，请使用 '),
                colors.green('fpm installenv'),
                colors.red('进行安装'));
            process.exit();
        }
    }
})();


commandFunc = command && mout.object.get(iffront.commands, command);
command = command && command.replace(/\./g, ' ');


if(commandFunc.line){
    commandFunc.line(process.argv);
}else{
    logger.error('command error : '+ command);
}

// Warn if HOME is not SET
if (!osenv.home()) {
    logger.warn('no-home', 'HOME not set, user configuration will not be loaded');
}


var notifier = updateNotifier({
    packageName: pkg.name,
    packageVersion: pkg.version
});

// Notify using the built-in convenience method
notifier.notify();

if(notifier.update){
    console.log(notifier.update);
}